plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'application'
}

group = 'nl.joozd'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation files("C:\\Users\\joozd\\StudioProjects\\LogbookApp\\joozdlogCommon\\build\\libs\\joozdlogCommon.jar")
    implementation files("C:\\Users\\joozd\\IdeaProjects\\libs\\joozdserializing-jvm-0.1.1.jar")
    implementation files("C:\\Users\\joozd\\StudioProjects\\LogbookApp\\JoozdlogImport\\build\\libs\\JoozdlogImport.jar")
    implementation files("C:\\Users\\joozd\\StudioProjects\\LogbookApp\\PdfLogbookBuilder\\build\\libs\\PdfLogbookBuilder.jar")
    implementation files("C:\\Users\\joozd\\StudioProjects\\LogbookApp\\JoozdlogImport\\build\\libs\\JoozdlogImport.jar")

    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"

    // guava
    implementation 'com.google.guava:guava:32.1.2-jre' // Check for the latest version

    // HTTP server
    implementation("io.javalin:javalin:5.6.1")

    //Javamail
    implementation("com.sun.mail:javax.mail:1.6.2")

    //logging
    implementation("org.slf4j:slf4j-api:2.0.7")
    implementation("ch.qos.logback:logback-classic:1.4.11")

    // JSON
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.15.0")         // JSON
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.12.3")    // CSV

    //H2 database
    implementation 'com.h2database:h2:2.2.220'


    // Exposed (database stuff)
    implementation("org.jetbrains.exposed:exposed-core:$EXPOSED_VERSION")
    implementation("org.jetbrains.exposed:exposed-dao:$EXPOSED_VERSION")
    implementation("org.jetbrains.exposed:exposed-jdbc:$EXPOSED_VERSION")

    //iTextPDF
    implementation 'com.itextpdf:itextpdf:5.5.13.3'

    // apache batik for signature to image
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.17'
    implementation 'org.apache.xmlgraphics:batik-codec:1.17'

}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(17)
}

application {
    mainClassName = 'MainKt'
}

def minJavaVersion = 17
def currentJavaVersion = JavaVersion.current()
if (currentJavaVersion.isJava11Compatible()) {
    println "Using Java $currentJavaVersion"
} else {
    throw new GradleException("Minimum required Java version is $minJavaVersion. Current is $currentJavaVersion")
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

